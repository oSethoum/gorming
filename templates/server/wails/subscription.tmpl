package api

import (
	"context"
	"encoding/json"
	"strings"

	"github.com/wailsapp/wails/v2/pkg/runtime"
)

type Message struct {
	Type  string `json:"type,omitempty"`
	Event string `json:"event,omitempty"`
	Data  any    `json:"data,omitempty"`
}

var events string

func Subscription(ctx context.Context) {

	runtime.EventsOn(ctx, "subscription", func(optionalData ...interface{}) {

		if len(optionalData) > 0 {
			m := new(Message)
			b, _ := json.Marshal(optionalData[0])
			json.Unmarshal(b, m)

			if m.Type == "subscribe" && !strings.Contains(events, m.Event) {
				events += strings.TrimSpace(events + " " + m.Event)
			}

			if m.Type == "unsubscribe" && strings.Contains(events, m.Event) {
				events = strings.ReplaceAll(events, m.Event, "")
				events = strings.ReplaceAll(events, "  ", " ")
			}

			if m.Type == "unsubscribeAll" {
				events = ""
			}

		}
	})

}

func Notify(ctx context.Context, event string, data any) {
	if strings.Contains(events, event) {
		runtime.EventsEmit(ctx, "notify", Message{
			Type:  "notify",
			Event: event,
			Data:  data,
		})
	}
}
