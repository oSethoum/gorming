package handlers

import (
	"{{ .Pkg }}/db"
	"{{ .Pkg }}/models"
	"encoding/json"

	"net/http"
	"github.com/labstack/echo/v4"
	"gorm.io/gorm"
)

func Handle[T models.Model](r *echo.Group, resource string) {
	r = r.Group(resource)
	r.GET("", func(c echo.Context) error {
		data := new([]T)
		query := new(Query)
		q := c.QueryParam("query")
		if q == "" {
			q = "{}"
		}
		err := json.Unmarshal([]byte(q), query)
		if err != nil {
			return Error(c, err)
		}
		client, err := query.P(db.Client.WithContext(c.Request().Context()), resource)
		if err != nil {
			return Error(c, err)
		}
		err = client.Find(data).Error
		if err != nil {
			return Error(c, err)
		}
		return Success(c, resource+":query", data)
	})

	r.POST("", func(c echo.Context) error {
		body := new([]T)
		err := c.Bind(body)
		if err != nil {
			return Error(c, err)
		}
		err = db.Client.WithContext(c.Request().Context()).Transaction(func(tx *gorm.DB) error {
			for i, v := range *body {
				if err := tx.Create(&v).Error; err != nil {
					return ApiError{ Err: err, Index: i }
				}
			}
			return nil
		})
		if err != nil {
			return Error(c, err)
		}
		return Success(c, resource+":create", body, http.StatusCreated)
	})

	r.PATCH("", func(c echo.Context) error {
		body := new([]T)
		err := c.Bind(body)
		if err != nil {
			return Error(c, err)
		}
		db.Client.WithContext(c.Request().Context()).Transaction(func(tx *gorm.DB) error {
			for i, v := range *body {
				err := tx.Updates(&v).Error
				if err != nil {
					return ApiError{ Err: err, Index: i }
				}
			}
			return nil
		})
		if err != nil {
			return Error(c, err)
		}
		return Success(c, resource+":update", body)
	})

	r.DELETE("", func(c echo.Context) error {
		body := new(Where)
		err := c.Bind(body)
		if err != nil {
			return Error(c, err)
		}
		predicate, vars, err := body.P()
		if err != nil {
			if err != nil {
				return Error(c, err)
			}
		}
		err = db.Client.WithContext(c.Request().Context()).Model(new(T)).Where(predicate, vars...).Error
		if err != nil {
			return Error(c, err)
		}
		return Success(c, resource+":delete", body)
	})
}
