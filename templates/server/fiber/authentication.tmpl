package handlers

import (
	"{{ .Config.Package }}/env"
	"{{ .Config.Package }}/db"
	"{{ .Config.Package }}/utils"
	"errors"

	"aidanwoods.dev/go-paseto"
	"github.com/gofiber/fiber/v2"
	"github.com/oSethoum/validator"
)

func Login(c *fiber.Ctx) error {

	body := new(struct {
		Username string `json:"username,omitempty" validate:"minLen=5"`
		Password string `json:"password,omitempty" validate:"minLen=5"`
	})

	err := c.BodyParser(body)
	if err != nil {
		return Error(c, err)
	}

	err = validator.Struct(body)
	if err != nil {
		return Error(c, err)
	}

	user := &db.User{
		Username: body.Username,
	}

	err = db.Client.Preload("Role").Find(user).Error
	if err != nil {
		return Error(c, errors.New("authentication: invalid credentials"))
	}

	if !utils.CheckPasswordHash(body.Password, user.Password) {
		return Error(c, errors.New("authentication: invalid credentials"))
	}

	token := paseto.NewToken()
	token.Set("denied_actions", user.Role.DeniedActions)
	token.Set("denied_fields", user.Role.DeniedFields)

	key, err := paseto.V4SymmetricKeyFromHex(env.TOKEN_AUTH_KEY)
	if err != nil {
		return Error(c, errors.New("auth: unable to generate access token"))
	}
	tokenString := token.V4Encrypt(key, []byte{})

	return Success(c, fiber.Map{"token": tokenString, "user": user})
}

func Register(c *fiber.Ctx) error {

	body := new(struct {
		Username string `json:"username,omitempty" validate:"minLen=5"`
		Password string `json:"password,omitempty" validate:"minLen=5"`
	})

	err := c.BodyParser(body)
	if err != nil {
		return Error(c, err)
	}

	err = validator.Struct(body)
	if err != nil {
		return Error(c, err)
	}

	body.Password, err = utils.HashPassword(body.Password)

	if err != nil {
		return Error(c, err, fiber.StatusInternalServerError)
	}

	user := &db.User{
		Username: body.Username,
		Password: body.Password,
		RoleID:   1,
	}

	err = db.Client.Create(user).Error
	if err != nil {
		return Error(c, err)
	}

	return Success(c, user)
}
