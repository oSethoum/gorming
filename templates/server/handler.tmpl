package handlers

import (
	"{{ .Config.Package }}/db"
	"encoding/json"
	"errors"
	"reflect"

	"github.com/gofiber/fiber/v2"
	"github.com/oSethoum/validator"
	"gorm.io/gorm"
)

func QueryResource[T any](resource string) fiber.Handler {
	return func(c *fiber.Ctx) error {
		result := new([]T)
		query := new(db.Query)
		unscoped := c.QueryBool("unscoped")

		q := c.Query("query", "{}")
		err := json.Unmarshal([]byte(q), query)
		if err != nil {
			return ErrorKey(c, "error_parsing_query", err)
		}

		limit := query.Limit
		offset := query.Offset

		query.Limit = nil
		query.Offset = nil

		client, err := query.P(db.DB.WithContext(c.UserContext()), resource)
		if err != nil {
			return Error(c, err)
		}

		if unscoped {
			client = client.Unscoped()
		}

		var count int64
		if err := client.Model(new(T)).Count(&count).Error; err != nil {
			return ErrorKey(c, "error_querying_count", err)
		}
		if limit != nil {
			client.Limit(*limit)
		}
		if offset != nil {
			client.Offset(*offset)
		}
		if err := client.Find(result).Error; err != nil {
			return ErrorKey(c, "error_querying_data", err)
		}

		data := fiber.Map{"count": count, "result": result}
		return Success(c, data)
	}
}

func CreateResource[T any](resource string) fiber.Handler {
	return func(c *fiber.Ctx) error {
		body := []T{}
		err := c.BodyParser(&body)
		if err != nil {
			return ErrorKey(c, "error_parsing_body", err)
		}
		if len(body) == 0 {
			return ErrorKey(c, "error_empty_body_array", nil)
		}
		err = db.DB.WithContext(c.UserContext()).Transaction(func(tx *gorm.DB) error {
			for i, v := range body {
				if err := validator.Struct(v); err != nil {
					return ApiResponseError{MainError: err, Index: i}
				}
				if err := tx.Create(&v).Error; err != nil {
					return ApiResponseError{MainError: err, Index: i}
				}
				body[i] = v
			}
			return nil
		})
		if err != nil {
			return ErrorKey(c, "error_creating_resource", err)
		}
		return Success(c, body, fiber.StatusCreated)
	}
}

func SaveResource[T any](resource string) fiber.Handler {
	return func(c *fiber.Ctx) error {
		body := []T{}
		err := c.BodyParser(&body)
		if err != nil {
			return ErrorKey(c, "error_parsing_body", err)
		}

		unscoped := c.QueryBool("unscoped")
		if len(body) == 0 {
			return ErrorKey(c, "error_empty_body_array", nil)
		}
		ids := []any{}
		err = db.DB.WithContext(c.UserContext()).Transaction(func(tx *gorm.DB) error {
			if unscoped {
				tx = tx.Unscoped()
			}
			for i, v := range body {
				id := reflect.ValueOf(v).FieldByName("ID").Interface()
				if id == nil {
					return ApiResponseError{MainError: errors.New("id is nil"), Index: i}
				}

				if err := validator.Struct(v); err != nil {
					return ApiResponseError{MainError: err, Index: i}
				}
				if err := tx.Save(&v).Error; err != nil {
					return ApiResponseError{MainError: err, Index: i}
				}

			}
			return nil
		})
		if err != nil {
			return ErrorKey(c, "error_saving_resource", err)
		}
		data := []T{}
		query := db.Query{Where: &db.Where{Field: &[3]any{"id", "in", ids}}}
		client, err := query.P(db.DB.WithContext(c.UserContext()), resource)
		if err != nil {
			return ErrorKey(c, "error_parsing_query", err)
		}
		err = client.Find(&data).Error
		if err != nil {
			return ErrorKey(c, "error_querying_data", err)
		}
		return Success(c, data)
	}
}

func UpdateResource[T any](resource string) fiber.Handler {
	return func(c *fiber.Ctx) error {
		body := []T{}
		err := c.BodyParser(&body)
		if err != nil {
			return ErrorKey(c, "error_parsing_body", err)
		}
		unscoped := c.QueryBool("unscoped")
		if len(body) == 0 {
			return ErrorKey(c, "error_empty_body_array", nil)
		}
		ids := []any{}
		err = db.DB.WithContext(c.UserContext()).Transaction(func(tx *gorm.DB) error {
			if unscoped {
				tx = tx.Unscoped()
			}
			for i, v := range body {
				id := reflect.ValueOf(v).FieldByName("ID").Interface()
				if id == nil {
					return ApiResponseError{MainError: errors.New("id is nil"), Index: i}
				}
				ids = append(ids, id)
				if err := validator.Struct(v); err != nil {
					return ApiResponseError{MainError: err, Index: i}
				}
				if err := tx.Where("id = ?", id).Save(&v).Error; err != nil {
					return ApiResponseError{MainError: err, Index: i}
				}
			}
			return nil
		})
		if err != nil {
			return ErrorKey(c, "error_updating_resource", err)
		}
		data := []T{}
		query := db.Query{Where: &db.Where{Field: &[3]any{"id", "in", ids}}}
		client, err := query.P(db.DB.WithContext(c.UserContext()), resource)
		if err != nil {
			return ErrorKey(c, "error_parsing_query", err)
		}
		err = client.Find(&data).Error
		if err != nil {
			return ErrorKey(c, "error_querying_data", err)
		}
		return Success(c, data)
	}
}

func DeleteResource[T any](resource string) fiber.Handler {
	return func(c *fiber.Ctx) error {
		body := new(db.Where)
		err := c.BodyParser(body)
		unscoped := c.QueryBool("unscoped")
		if err != nil {
			return ErrorKey(c, "error_parsing_body", err)
		}
		predicate, vars, err := body.P()
		if err != nil {
			return ErrorKey(c, "error_parsing_where_predicate", err)
		}
		data := []T{}

		client := db.DB.WithContext(c.UserContext()).Model(new(T))
		if unscoped {
			client = client.Unscoped()
		}
		client.Where(predicate, vars...).Find(&data)
		if len(data) == 0 {
			return ErrorKey(c, "error_nothing_to_delete", nil)
		}
		client = db.DB.WithContext(c.UserContext()).Model(new(T))
		if unscoped {
			client = client.Unscoped()
		}
		err = client.Delete(predicate, vars...).Error
		if err != nil {
			return ErrorKey(c, "error_deleting_resources", err)
		}
		return Success(c, data)
	}
}
