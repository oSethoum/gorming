import { EventsEmit, EventsOn, EventsOnce } from "$lib/wailsjs/runtime/runtime";
import type { TQuery, TSchema, TWhere } from "./types";

type Action = "query" | "create" | "update" | "delete";

type Event<T extends keyof TSchema> = `${T}:${Action}`;

type Message<T extends keyof TSchema> = {
  type: "notify";
  event: Event<T>;
  data?: Array<TSchema[T]["type"]>;
};

export type ResponseError = {
  type: "validation" | "database" | "other";
  index?: number;
  message: string;
  validation?: Array<{
    field: string;
    tag: string;
    param?: string;
    value: string;
  }>;
  database?: {
    field?: string;
    constraint?: string;
  };
};

export type Callback = (data) => void;

type Response<T extends keyof TSchema> = {
  status: "success" | "error";
  data: Array<TSchema[T]["type"]>;
  error?: ResponseError;
};

class Api {
  private static instance?: Api;
  private callbacks?: Map<string, Callback[]>;

  static new(): Api {
    if (this.instance) {
      return this.instance;
    } else {
      this.instance = new Api();
      return this.instance;
    }
  }

  private constructor() {
    EventsOn("notify", (data) => {
      console.log(data);
    });
  }

  private request(action: string, param: any): Promise<any> {
    return window["go"]["main"]["App"][action](param);
  }

  query<T extends keyof TSchema>(
    resource: T,
    query: TQuery<T>
  ): Promise<Response<T>> {
    return this.request("Query_" + resource, query);
  }

  create<T extends keyof TSchema>(
    resource: T,
    input: Array<TSchema[T]["create"]>
  ): Promise<Response<T>> {
    return this.request("Create_" + resource, input);
  }

  update<T extends keyof TSchema>(
    resource: T,
    input: Array<TSchema[T]["update"]>
  ): Promise<Response<T>> {
    return this.request("Update_" + resource, input);
  }

  delete<T extends keyof TSchema>(
    resource: T,
    where: TWhere<T>
  ): Promise<Response<T>> {
    return this.request("Delete_" + resource, where);
  }

  subscribe<T extends keyof TSchema>(
    event: Event<T>,
    callback: (data: Message<T>) => void
  ) {
    const callbacks = this.callbacks?.get(event);
    if (!callbacks) {
      this.callbacks?.set(event, [callback]);
    } else {
      callbacks.forEach((c) => {
        if (c != callback) {
          callbacks.push(callback);
        }
      });
      this.callbacks?.set(event, callbacks);
    }
    EventsEmit("subscription", { type: "subscribe", event });
  }

  unsubscribe<T extends keyof TSchema>(
    event: Event<T>,
    callback: (data: Message<T>) => void
  ) {
    const callbacks = this.callbacks?.get(event);
    if (callbacks) {
      const filtered = callbacks.filter((c) => c != callback);
      if (filtered.length == 0) {
        this.callbacks?.delete(event);
        EventsEmit("subscription", { type: "unsubscribe", event });
      } else {
        this.callbacks?.set(event, filtered);
      }
    }
  }

  unsubscribeAll() {
    EventsEmit("subscription", { type: "unsubscribe" });
  }
}

export const api = Api.new();
