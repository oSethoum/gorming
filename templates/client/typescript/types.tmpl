{{- range .Schema.Types }}
export interface {{ .Name }} {
    {{ range .Columns -}}
    {{- if .Tags.Json.Ignore}}{{ continue }}{{ end -}}
    {{ tsName . }}{{- tsOptional . -}}: {{ tsType . }};
    {{ end -}}
}
{{ end }}

{{- range .Schema.Tables }}
export interface {{ .Name }} {
    {{ range .Columns -}}
    {{ $column := . }}
    {{- if .Tags.Json.Ignore}}{{ continue }}{{ end -}}
    {{-  with .Edge -}}
    {{ tsName $column }}?: {{ tsType $column }};
    {{- else -}}
    {{ tsName $column }}{{- tsOptional $column -}}: {{ tsType $column }};
    {{- end -}}
    {{ end -}}
}
{{ end }}

{{- range .Schema.Tables }}
  export type {{ .Name }}Relations = {
    {{ range .Columns -}}
    {{- $column := . -}}
    {{ with .Edge -}}
    {{ tsName $column }}:"{{ tableNameString .Table }}";
    {{ end -}}
    {{ end -}}
  };

  export type {{ .Name }}Fields = Omit<{{ .Name }}, keyof {{ .Name }}Relations>;
  export type {{ .Name }}UniqueRelations = "{{ uniqueRelations . }}";

  export type {{ .Name }}CreateInput = {
    {{- range .Columns -}}
      {{- $column := . -}}
      {{- if .Tags.Json.Ignore }}{{ continue }}{{end}}
      {{- with .Edge }}
      {{ tsName $column }}?: {{- $omit := tsCreateOmit $column -}} {{ if $omit.Should }} MakeOptional<{{ $column.RawType }}CreateInput, "{{ $omit.Field }}"> {{- else -}} {{ $column.RawType }}CreateInput{{- end -}}{{- if $column.Slice}}[]{{- end -}};
      {{- else }}
      {{ tsName $column }}{{- tsOptionalCreate $column  -}}: {{ tsType $column }};
      {{- end }}
    {{- end }}
  };

  export type {{ .Name }}UpdateInput = {
    {{- range .Columns -}}
    {{- $column := . -}}
      {{- if .Tags.Json.Ignore }}{{ continue }}{{end}}
      {{- with .Edge }}
      {{ tsName $column }}?: {{ $column.RawType }}UpdateInput{{- if $column.Slice}}[]{{- end -}};
      {{- else }}
      {{ tsName $column }}?: {{ tsType $column }};
      {{- end }}
    {{- end }}
  };
{{ end }}

export type TSchema = {
  {{ range .Schema.Tables -}}
  {{ tableName . }}: {
    fields: {{ .Name }}Fields;
    type: {{ .Name }};
    create: {{ .Name }}CreateInput;
    update: {{ .Name }}UpdateInput;
    preloads: {
         [K in keyof {{ .Name }}Relations]?: K extends {{ .Name }}UniqueRelations
            ? Omit<TQuery<{{ .Name }}Relations[K]>, "offset" | "limit" | "where" | "orders">
            : TQuery<{{ .Name }}Relations[K]>;
      };
      with: {
         [K in keyof {{ .Name }}Relations]?: {
            with?: TWith<{{ .Name }}Relations[K]>;
            where: TWhere<{{ .Name }}Relations[K]>;
         };
      };
  };
  {{ end }}
};

export type TWhere<T extends keyof TSchema> = {
   not?: TWhere<T>;
   and?: Array<TWhere<T>>;
   or?: Array<TWhere<T>>;
   field?: TField<T>;
};

export type TField<T extends keyof TSchema> =
   | {
        name: keyof TSchema[T]["fields"];
        predicate: TNullPredicate;
     }
   | {
        name: keyof TSchema[T]["fields"];
        predicate: TPredicate;
        value: any;
     };

export type TOrder<T extends keyof TSchema> = {
   field: keyof TSchema[T]["fields"];
   direction: "ASC" | "DESC";
};

export type TPredicate =
  | "between"
  | "like"
  | "in"
  | "not in"
  | "="
  | "<>"
  | ">"
  | ">="
  | "<"
  | "<=";

export type TNullPredicate = "null" | "not null";

type TWith<T extends keyof TSchema> = TSchema[T]["with"];

export type TQuery<T extends keyof TSchema> = {
   select?: Array<keyof TSchema[T]["fields"]>;
   with?: TWith<T>;
   omit?: Array<keyof TSchema[T]["fields"]>;
   offset?: number;
   limit?: number;
   orders?: Array<TOrder<T>>;
   where?: TWhere<T>;
   preloads?: TSchema[T]["preloads"];
};

// helpers
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [P in K]?: T[P] };