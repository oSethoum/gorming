import type { ApiResponse } from "./request";
import type { TSchema, TQuery, TWhere } from "./types";

export const createApi = (
  request: <T>(url: string, init?: RequestInit) => Promise<ApiResponse<T>>
) => {
  return {
    async query<T extends keyof TSchema>(
      resource: T,
      query?: TQuery<T> & { unscoped?: boolean }
    ) {
      let url = `/${resource}${
        query ? `?query=${encodeURIComponent(JSON.stringify(query))}` : ""
      }${query?.unscoped ? "&unscoped=true" : ""}`;
      return request<
        {
          [K in T]: Array<TSchema[K]["type"]>;
        } & { count: number }
      >(url);
    },

    async create<T extends keyof TSchema>(
      resource: T,
      input: Array<TSchema[T]["create"]>
    ) {
      return request<Array<TSchema[T]["type"]>>(`/${resource}`, {
        method: "POST",
        headers: {
          "content-type": "application/json",
        },
        body: JSON.stringify(input),
      });
    },

    async save<T extends keyof TSchema>(
      resource: T,
      input: Array<TSchema[T]["update"]>,
      unscoped?: boolean
    ) {
      return request<Array<TSchema[T]["type"]>>(
        `/${resource}${unscoped ? "?unscoped=true" : ""}`,
        {
          method: "PUT",
          headers: {
            "content-type": "application/json",
          },
          body: JSON.stringify(input),
        }
      );
    },

    async update<T extends keyof TSchema>(
      resource: T,
      input: Array<TSchema[T]["update"]>,
      options?: {
        unscoped?: boolean;
        select?: string[];
        omit?: string[];
      }
    ) {
      const selects =
        options?.select || input.length > 0 ? Object.keys(input[0]) : [];
      const omits = options?.omit || [];

      return request<Array<TSchema[T]["type"]>>(
        `/${resource}?select=${selects.join(",")}&omit=${omits.join(",")}${
          options?.unscoped ? "&unscoped=true" : ""
        }`,
        {
          method: "PATCH",
          headers: {
            "content-type": "application/json",
          },
          body: JSON.stringify(input),
        }
      );
    },

    async delete<T extends keyof TSchema>(
      resource: T,
      predicate: TWhere<T> & { unscoped?: boolean }
    ) {
      return request<Array<TSchema[T]["type"]>>(
        `/${resource}${predicate.unscoped ? "?unscoped=true" : ""}`,
        {
          method: "DELETE",
          headers: {
            "content-type": "application/json",
          },
          body: JSON.stringify(predicate),
        }
      );
    },
  };
};
