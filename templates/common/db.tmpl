package db

import (
	"fmt"
	{{ if eq .Config.DBKind "sqlite" }}
	"github.com/oSethoum/sqlite"
	{{ end }}
	{{ if eq .Config.DBKind "mysql" }}
	"gorm.io/driver/mysql"
	{{ end }}
	{{ if eq .Config.DBKind "postgres" }}
	"gorm.io/driver/postgres"
	{{ end }}
	"gorm.io/gorm"
	{{ if .Config.Debug -}}
	"gorm.io/gorm/logger"
	{{- end -}}
)

var DB *gorm.DB

func Init() error {
	{{ if eq .Config.DBKind "sqlite" }}
	dsn := fmt.Sprintf("file:%s?_fk=1&_pragma_key=%s", "db.sqlite", "")
	dialect := sqlite.Open(dsn)
	{{ end }}

	{{ if eq .Config.DBKind "mysql" }}
	dsn := fmt.Sprintf("%s:%s@tcp(127.0.0.1:3306)/%s?charset=utf8mb4&parseTime=True&loc=Local", "user", "password", "db")
	dialect := mysql.Open(dsn)
	{{ end }}
	{{ if eq .Config.DBKind "postgres" }}
	dsn := fmt.Sprintf("host=localhost user=%s password=%s dbname=%s port=5432 sslmode=disable", "user", "password", "db")
	dialect := postgres.Open(dsn)
	{{ end }}
	client, err := gorm.Open(dialect, &gorm.Config{
		PrepareStmt:                              true,
		{{ if .Config.Debug }}
		Logger:                                   logger.Default.LogMode(logger.Info),
		{{ end -}}
	})

	if err != nil {
		return err
	}

	DB = client
	return nil
}

func Close() error {
	if DB != nil {
		conn, err := DB.DB()
		if err != nil {
			return err
		}
		return conn.Close()
	}
	return nil
}
