// this query file is for sqlite to adapt it to " instead of `

package db

import (
	"errors"
	"fmt"
	"regexp"
	"strings"
	"unicode"

	"gorm.io/gorm"
)

type Query struct {
	Select   []string          `json:"select,omitempty"`
	Omit     []string          `json:"omit,omitempty"`
	Limit    *int              `json:"limit,omitempty"`
	Offset   *int              `json:"offset,omitempty"`
	Orders   [][2]string       `json:"orders,omitempty"`
	Preloads map[string]*Query `json:"preloads,omitempty"`
	Where    *Where            `json:"where,omitempty"`
}

type Where struct {
	Not   *Where            `json:"not,omitempty"`
	Or    []*Where          `json:"or,omitempty"`
	And   []*Where          `json:"and,omitempty"`
	Field *[3]any           `json:"field,omitempty"`
	Has   map[string]*Where `json:"has,omitempty"`
}

func (q *Query) P(client *gorm.DB, table string) (*gorm.DB, error) {
	if client == nil {
		return nil, errors.New("query: gorm client is nil")
	}

	queryHook(client, table, q)

	countFn := func() func() uint {
		var value uint = 0
		return func() uint {
			value++
			return value
		}
	}()

	if len(q.Preloads) > 0 {
		relations, ok := relationsMap[table]
		if !ok {
			return nil, fmt.Errorf("query: cannot preload %s", table)
		}

		for key, value := range q.Preloads {
			relation, ok := relations[key]
			if !ok {
				return nil, fmt.Errorf("query: invalid relation %s", key)
			}

			if value == nil {
				client = client.Preload(edge(key))
			} else {
				client = client.Preload(edge(key), func(db *gorm.DB) *gorm.DB {
					ndb, err := value.P(db, relation[0])
					if err != nil {
						return db
					}
					return ndb
				})
			}

		}
	}

	if len(q.Select) > 0 {
		client = client.Select(q.Select)
	}

	if len(q.Omit) > 0 {
		client.Omit(q.Omit...)
	}

	prefix := client.NamingStrategy.TableName("")
	if q.Where != nil {
		joins, query, vars, err := q.Where.P(table, "", prefix, countFn)
		if err != nil {
			return nil, err
		}

		for _, join := range joins {
			client = client.Joins(join)
		}

		if query != "" {
			client = client.Where(query, vars...)
		}
	}

	if q.Limit != nil {
		client = client.Limit(int(*q.Limit))
	}

	if q.Offset != nil {
		client = client.Offset(int(*q.Offset))
	}

	if len(q.Orders) > 0 {
		for _, order := range q.Orders {
			if !isField(order[0]) {
				return nil, fmt.Errorf("order: field %s is not alphanumeric", order[0])
			}
			order[0] = `"` + prefix + table + `"."` + order[0] + `"`

			if order[1] == "" {
				order[1] = "ASC"
			} else if strings.ToUpper(order[1]) != "ASC" && strings.ToUpper(order[1]) != "DESC" {
				return nil, fmt.Errorf("order: direction for field %s must be ASC or DESC", order[0])
			}
			client = client.Order(order[0] + " " + order[1])
		}
	}

	return client, nil
}

func (tw *Where) P(table, asTable, prefix string, countFn func() uint) ([]string, string, []any, error) {
	if tw == nil {
		return nil, "", nil, nil
	}

	queries := []string{}
	joins := []string{}
	vars := []any{}

	if len(tw.Has) > 0 {
		count := countFn()
		for key, value := range tw.Has {
			relation, ok := relationsMap[table][key]
			if !ok {
				return nil, "", nil, fmt.Errorf("query: invalid with relation %s", key)
			}

			newPrefix := fmt.Sprintf("%s_%d", prefix+relation[0], count)

			if asTable == "" {
				asTable = prefix + table
			}

			if len(relation) == 3 {
				joins = append(joins, fmt.Sprintf(`INNER JOIN "%s" as "%s"`,
					prefix+relation[0],
					newPrefix,
				))
				queries = append(queries,
					fmt.Sprintf(`"%s" = "%s"`, asTable+`"."`+relation[1], newPrefix+`"."`+relation[2]),
				)
			}

			if len(relation) == 6 {
				midPrefix := fmt.Sprintf("%s_%d", prefix+relation[3], count)
				joins = append(joins, fmt.Sprintf(
					`INNER JOIN "%s" as "%s" INNER JOIN "%s" as "%s"`,
					prefix+relation[3],
					midPrefix,
					prefix+relation[0],
					newPrefix,
				))
				queries = append(queries,
					fmt.Sprintf(`"%s" = "%s"`, asTable+`"."`+relation[1], midPrefix+`"."`+relation[4]),
					fmt.Sprintf(`"%s" = "%s"`, newPrefix+`"."`+relation[1], midPrefix+`"."`+relation[5]),
				)
			}

			subJoins, subQuery, subVars, err := value.P(relation[0], newPrefix, prefix, countFn)

			if err != nil {
				return nil, "", nil, err
			}

			if subJoins != nil {
				joins = append(joins, subJoins...)
			}

			if subQuery != "" {
				queries = append(queries, subQuery)
			}

			if len(subVars) > 0 {
				vars = append(vars, subVars...)
			}
		}
	}

	if len(tw.And) > 0 {
		andQueries := []string{}
		for _, v := range tw.And {
			andJoins, andQuery, andVars, err := v.P(table, asTable, prefix, countFn)
			if err != nil {
				return nil, "", nil, err
			}

			andQueries = append(andQueries, andQuery)
			joins = append(joins, andJoins...)
			vars = append(vars, andVars...)
		}

		if len(andQueries) == 1 {
			queries = append(queries, andQueries...)
		} else if len(andQueries) > 1 {
			queries = append(queries, "("+strings.Join(andQueries, " AND ")+")")
		}
	}

	if len(tw.Or) > 0 {
		orQueries := []string{}
		for _, v := range tw.Or {
			orJoins, orQuery, orVars, err := v.P(table, asTable, prefix, countFn)
			if err != nil {
				return nil, "", nil, err
			}
			joins = append(joins, orJoins...)
			vars = append(vars, orVars...)
			orQueries = append(orQueries, orQuery)
		}

		if len(orQueries) == 1 {
			queries = append(queries, orQueries...)
		} else if len(orQueries) > 1 {
			queries = append(queries, "("+strings.Join(orQueries, " OR ")+")")
		}
	}

	if tw.Not != nil {
		notJoins, notQuery, notVars, err := tw.Not.P(table, asTable, prefix, countFn)
		if err != nil {
			return nil, "", nil, err
		}
		joins = append(joins, notJoins...)
		queries = append(queries, fmt.Sprintf("NOT ( %s )", notQuery))
		vars = append(vars, notVars...)
	}

	if tw.Field != nil {
		var fieldQuery string
		field := fmt.Sprintf("%v", tw.Field[0])
		if !isField(field) {
			return nil, "", nil, fmt.Errorf("where: %+v has to be a valid field", field)
		}

		field = strings.ReplaceAll(prefix+field, ".", "`.`")

		if asTable == "" {
			asTable = table
		}
		asTable = fmt.Sprintf("`%s`.", asTable)

		switch fmt.Sprintf("%v", tw.Field[1]) {

		case "like":
			fieldQuery = fmt.Sprintf(`%s"%s" LIKE (?)`, asTable, field)
			vars = append(vars, tw.Field[2])
		case "contains":
			fieldQuery = fmt.Sprintf(`%s"%s" LIKE (?)`, asTable, field)
			vars = append(vars, "%"+fmt.Sprintf("%v", tw.Field[2])+"%")
		case "prefix":
			fieldQuery = fmt.Sprintf(`%s"%s" LIKE (?)`, asTable, field)
			vars = append(vars, fmt.Sprintf("%v", tw.Field[2])+"%")
		case "suffix":
			fieldQuery = fmt.Sprintf(`%s"%s" LIKE (?)`, asTable, field)
			vars = append(vars, "%"+fmt.Sprintf("%v", tw.Field[2]))
		case "null":
			fieldQuery = fmt.Sprintf(`%s"%s" IS NULL`, asTable, field)
		case "not null":
			fieldQuery = fmt.Sprintf(`%s"%s" IS NOT NULL`, asTable, field)
		case "between":
			fieldQuery = fmt.Sprintf(`%s"%s" BETWEEN ? AND ?`, asTable, field)
			value := tw.Field[0].([]any)
			vars = append(vars, value[:]...)
		case "in":
			fieldQuery = fmt.Sprintf(`%s"%s" IN (?)`, asTable, field)
			vars = append(vars, tw.Field[2])
		case "not in":
			fieldQuery = fmt.Sprintf(`%s"%s" NOT IN (?)`, asTable, field)
			vars = append(vars, tw.Field[2])
		case "=":
			fieldQuery = fmt.Sprintf(`%s"%s" = ?`, asTable, field)
			vars = append(vars, tw.Field[2])
		case "<>":
			fieldQuery = fmt.Sprintf(`%s"%s" <> ?`, asTable, field)
			vars = append(vars, tw.Field[2])
		case ">":
			fieldQuery = fmt.Sprintf(`%s"%s" > ?`, asTable, field)
			vars = append(vars, tw.Field[2])
		case ">=":
			fieldQuery = fmt.Sprintf(`%s"%s" >= ?`, asTable, field)
			vars = append(vars, tw.Field[2])
		case "<":
			fieldQuery = fmt.Sprintf(`%s"%s" < ?`, asTable, field)
			vars = append(vars, tw.Field[2])
		case "<=":
			fieldQuery = fmt.Sprintf(`%s"%s" <= ?`, asTable, field)
			vars = append(vars, tw.Field[2])
		default:
			return nil, "", nil, fmt.Errorf("where: %+v invalid predicate", tw.Field[1])
		}
		queries = append(queries, fieldQuery)
	}

	return joins, strings.Join(queries, " AND "), vars, nil
}

func isField(field string) bool {
	_, err := regexp.MatchString(`^\w+(\.\w+)*$`, field)
	return err == nil
}

func edge(s string) string {
	if strings.Contains(s, "_") {
		ss := ""
		for _, v := range strings.Split(s, "_") {
			ss += string(unicode.ToUpper(rune(v[0]))) + v[1:]
		}
		return ss
	} else {

		return string(unicode.ToUpper(rune(s[0]))) + s[1:]
	}
}
